version: "3"

x-airflow-common:
  &airflow-common
  build: ./news_loader
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    CNN_SCRAPPER_URL: http://${CNN_SCRAPPER_HOST}:${CNN_SCRAPPER_PORT}
    DB_SERVER_URL: http://${DB_SERVER_HOST}:${DB_SERVER_PORT}
  volumes:
    - ./news_loader/dags:/opt/airflow/dags
    - ./news_loader/logs:/opt/airflow/logs
    - ./news_loader/plugins:/opt/airflow/plugins
  platform: linux/amd64
  user: "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-50000}"
  depends_on:
    postgres:
      condition: service_healthy

services:
  cnn_scrapper:
    container_name: cnn_scrapper
    image: cnn_scrapper:1
    build: ./scrappers/cnn_scrapper
    ports:
      - ${CNN_SCRAPPER_PORT}:${CNN_SCRAPPER_PORT}
    environment:
      - CNN_SCRAPPER_PORT=${CNN_SCRAPPER_PORT}

  db_server:
    container_name: db_server
    image: db_server:1
    build: ./db_server
    ports:
      - ${DB_SERVER_PORT}:${DB_SERVER_PORT}
    environment:
      - DB_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:${POSTGRES_PORT}/${POSTGRES_DATABASE}
      - DB_SERVER_PORT=${DB_SERVER_PORT}
    depends_on:
      - db

  ml_server:
    container_name: ml_server
    image: ml_server:1
    build: ./ml_server
    platform: linux/amd64
    ports:
      - ${ML_SERVER_PORT}:${ML_SERVER_PORT}
    deploy:
      resources:
        limits:
          memory: 50g
    environment:
      - DB_SERVER_URL=http://${DB_SERVER_HOST}:${DB_SERVER_PORT}
      - ML_SERVER_PORT=${ML_SERVER_PORT}
      - AWS_ACCESS_KEY_ID=${MINIO_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${MINIO_SECRET_ACCESS_KEY}
      - MLFLOW_S3_ENDPOINT_URL=http://minio:${MINIO_SERVER_PORT}
      - MLFLOW_TRACKING_URI=http://mlflow-server:${MLFLOW_PORT}
    depends_on:
      - mc
      - db
      - db_server

  mlflow-server:
    image: mlflow-server:latest
    container_name: mlflow-server
    build: ./mlflow_server
    ports:
      - ${MLFLOW_PORT}:${MLFLOW_PORT}
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow-server:${MLFLOW_PORT}
      - AWS_ACCESS_KEY_ID=${MINIO_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${MINIO_SECRET_ACCESS_KEY}
      - MLFLOW_S3_ENDPOINT_URL=http://minio:${MINIO_SERVER_PORT}
      - MLFLOW_PORT=${MLFLOW_PORT}
      - BACKEND_STORE_URI=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:${POSTGRES_PORT}/${POSTGRES_DATABASE}
    depends_on:
      - db
      - minio

  db:
    container_name: db
    image: postgres:12
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DATABASE}
    volumes:
      -  pgdata:/var/lib/postgresql/data

  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - ${MINIO_SERVER_PORT}:${MINIO_SERVER_PORT}
      - ${MINIO_UI_PORT}:${MINIO_UI_PORT}
    environment:
      - MINIO_ROOT_USER=minio
      - MINIO_ROOT_PASSWORD=miniopass
    volumes:
      - minio-data:/data
    command: server /data --console-address ":9001"

  mc:
    image: minio/mc:latest
    depends_on:
      - minio
    container_name: mc
    env_file:
      - .env
    entrypoint: >
      /bin/sh -c "
      /tmp/wait-for-it.sh minio:9000 &&
      /usr/bin/mc alias set minio http://minio:9000 ${MINIO_ACCESS_KEY_ID} ${MINIO_SECRET_ACCESS_KEY} &&
      /usr/bin/mc mb minio/mlflow;
      exit 0;
      "
    volumes:
      - ./wait-for-it.sh:/tmp/wait-for-it.sh

  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "airflow" ]
      interval: 5s
      retries: 5
    restart: always

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8080/health" ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    restart: always
    depends_on:
      - cnn_scrapper
      - db_server

  airflow-init:
    <<: *airflow-common
    command: version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}

volumes:
  pgdata: {}
  minio-data:
  postgres-db-volume: